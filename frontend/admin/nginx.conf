worker_processes 1;

events { worker_connections 1024; }

http {
  include                 mime.types;
  default_type            application/octet-stream;
  sendfile                on;
  keepalive_timeout       65;
  ## 配置 GZip 压缩
  gzip                    on;
  gzip_comp_level         6;
  gzip_vary               on;
  ## 只有大于此长度的进行压缩
  gzip_min_length         1000;
  gzip_proxied            any;
  ## 支持压缩的资源格式
  gzip_types              text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;
  gzip_buffers            32 8k;
  ## 设置 Web API 服务器
  upstream api_server {
    server backend:8080;
  }

  # 需要在 server 区块之外定义
  log_format upstreamlog '[$time_local] $remote_addr - $remote_user - $server_name $host to: $upstream_addr: $request $status upstream_response_time $upstream_response_time msec $msec request_time $request_time';

  server {
    listen       80;
    server_name  localhost;
    charset utf-8;
    ## 反向代理，前端访问 /api/* 的请求
    ## 会被转发到 api_server
    ## 上面定义的 xx.xx.xx.xx:8080
    ## 这样我们就避免了跨域问题
    location ~ ^/api/(.*)$ {
      access_log /var/log/nginx/access.log upstreamlog;
      proxy_pass http://api_server/api/$1;
      proxy_redirect     off;
      proxy_set_header   Host $host;
      proxy_set_header   X-Real-IP $remote_addr;
      proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header   X-Forwarded-Host $server_name;
    }

    location / {
      root   /usr/share/nginx/html;
      index  index.html;
      expires -1;
      add_header Pragma "no-cache";
      add_header Cache-Control "no-store, no-cache, must-revalidate, post-check=0, pre-check=0";
      ## 重定向 404 到 index.html
      ## 这个设置对于前端应用可以支持浏览器刷新非常重要
      try_files $uri$args $uri$args/ $uri $uri/ /index.html =404;
    }
  }
}